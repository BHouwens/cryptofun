use std::fmt;
use std::ops::{ Rem, Shl };
use num_traits::{ One, Zero, Signed };
use num_bigint::{ BigUint, BigInt, ToBigUint, ToBigInt, Sign };

/**
 * We consider two types of curves equations:
 * 1. Short Weierstrass y^2 = x^3 + A x + B     mod P   (SEC1 + RFC 4492)
 * 2. Montgomery,       y^2 = x^3 + A x^2 + x   mod P   (Curve25519 + draft)
 * 
 * The third main type, Twisted Edwards, can be introduced at a later date. 
 * A reference implementation of Ed25519 in Python can be found here: 
 * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#appendix-A
 * 
 * In the two current cases, a generator G for a prime-order subgroup is fixed. 
 * In short weierstrass, this subgroup is actually the whole curve, and its
 * cardinal is denoted by N.
 *
 * In the case of Short Weierstrass curves, our code requires that N is an odd
 * prime.
 *
 * In the case of Montgomery curves, nbits is not the size of N
 * but the required size for private keys.
 */

#[derive(PartialEq)]
pub enum ECPCurveShape {
    ShortWeierstrass,
    Montgomery
}

/**
 * Extreme caution is advised if there is an intention to use any of the 
 * NIST curves. More information on why can be found here: 
 * https://www.schneier.com/blog/archives/2013/09/the_nsa_is_brea.html#c1675929
 * 
 * The rigidity of NIST curves, as well as many others for comparison, can also 
 * be found here: https://safecurves.cr.yp.to/rigid.html
 * 
 * Further support for Twisted Edwards curves will be provided in future
 */

#[derive(PartialEq, Clone)]
pub enum ECPSupportedCurves {
    SECP256R1,      // 256-bits NIST curve
    SECP384R1,      // 384-bits NIST curve
    SECP521R1,      // 521-bits NIST curve
    BP256R1,        // 256-bits Brainpool curve 
    BP384R1,        // 384-bits Brainpool curve 
    BP521R1,        // 521-bits Brainpool curve
    Curve25519      // Curve 25519
}


/*----- Structs -----*/

#[derive(Clone)]
pub struct ECPGroup {
    name: &'static str, // Internal group identifier
    pub p: BigInt, // Prime modulus
    pub a: BigUint, // 1. A in the equation, or 2. (A + 2) / 4 
    pub b: BigUint, // 1. B in the equation, or 2. unused
    pub g: ECPPoint, // Generator of the (sub)group used
    pub n: BigUint, // 1. the order of G, or 2. unused
    pub nbits: usize, // number of bits in 1. P, or 2. private keys
    pub t: Vec<ECPPoint>, // pre-computed point for comb method multiplication
    pub t_size: usize // size for pre-computed point
}

#[derive(Clone, Debug)]
pub struct ECPPoint {
    pub x: BigInt,
    pub y: Option<BigInt>,
    pub z: BigInt
}


/*----- Implementations -----*/

impl ECPGroup {

    /**
     * Initialize a group
     * 
     * `curve` - Elliptic curve to use
     */

    pub fn new(curve: ECPSupportedCurves) -> Self {
        match curve {
            ECPSupportedCurves::SECP256R1 => create_from_domain_parameters(&SECP256R1),
            ECPSupportedCurves::SECP384R1 => create_from_domain_parameters(&SECP384R1),
            ECPSupportedCurves::SECP521R1 => create_from_domain_parameters(&SECP521R1),
            ECPSupportedCurves::BP256R1 => create_from_domain_parameters(&BP256R1),
            ECPSupportedCurves::BP384R1 => create_from_domain_parameters(&BP384R1),
            ECPSupportedCurves::BP521R1 => create_from_domain_parameters(&BP521R1),
            ECPSupportedCurves::Curve25519 => {
                let generator_point = ECPPoint::new(&9.to_bigint().unwrap(), None);
                let mut p = BigInt::one();

                p = p.shl(255);
                p = p - 19.to_bigint().unwrap();

                return ECPGroup {
                    name: "Curve25519",
                    p: p,
                    a: 486662.to_biguint().unwrap(),
                    b: BigUint::one(),
                    g: generator_point.clone(),
                    n: BigUint::one(),
                    nbits: 254,
                    t: vec![generator_point],
                    t_size: 0
                };               
            }
        }
    }


    /**
     * Get the shape of the group curve
     */

    pub fn get_curve_shape(&self) -> ECPCurveShape {
        match &self.g.y {
            &Some(ref _y) => ECPCurveShape::ShortWeierstrass,
            &None => ECPCurveShape::Montgomery
        }
    }


    /**
     * Mod P calculation used in numerous instances for 
     * value generation
     * 
     * `n` - Value to mod
     */

    pub fn mod_p(&self, n: &BigInt) -> BigInt {
        n.clone().rem(&self.p)
    }


    /**
     * Reduce a mod p in-place. We know P, N and the result are 
     * positive, so sub_abs is correct, and a bit faster.
     * 
     * `n` - Value to reduce
     */

    pub fn mod_reduce(&self, n: &BigInt) -> BigInt {
        let mut n_clone = n.clone();
        let p_int = self.p.clone();

        if n_clone >= p_int {
            while n_clone >= p_int {
                n_clone = n_clone.clone().abs_sub(&p_int);
            }
        }

        n_clone
    }


    /**
     * Increase a mod p in-place if the value is less than 0
     * 
     * `n` - Value to increase
     */

    pub fn mod_increase(&self, n: &BigInt) -> BigInt {
        let mut n_clone = n.clone();

        if n < &BigInt::zero() && n != &BigInt::zero() {
            while n_clone < BigInt::zero() {
                n_clone = &n_clone + &self.p;
            }
        }

        n_clone
    }
}


/*---- ECP Point ----*/

impl ECPPoint {

    /**
     * Initialize a new point
     * 
     * `x` - X coordinate
     * `y` - Y coordinate
     */

    pub fn new(x: &BigInt, y: Option<BigInt>) -> Self {
        ECPPoint {
            x: x.clone(),
            y: y,
            z: BigInt::one()
        }
    }


    /**
     * Set point to zero
     */

    pub fn set_to_zero(&mut self) -> () {
        self.x = BigInt::one();
        self.y = Some(BigInt::one());
        self.z = BigInt::zero();
    }


    /**
     * Checks whether point is at zero
     */

    pub fn is_zero(&self) -> bool {
        if self.x == BigInt::zero()
        && self.y == Some(BigInt::zero())
        && self.z == BigInt::zero() {
            return true;
        }

        false
    }

}

impl fmt::Display for ECPPoint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match self.y {
            Some(ref y) => write!(f, "Weierstrass (x: {}, y: {}, z:{})", self.x, y, self.z),
            None => write!(f, "Montgomery (x: {}, y: None, z:{})", self.x, self.z)
        }
    }
}


/*---- Domain Parameters ----*/

struct ECurveDomainParameters {
    name: &'static str,
    p: &'static [u8],
    a: &'static [u8],
    b: &'static [u8],
    gx: &'static [u8],
    gy: &'static [u8],
    n: &'static [u8]
}

fn create_from_domain_parameters(from: &ECurveDomainParameters) -> ECPGroup {
    let generator_point = ECPPoint::new(
        &BigUint::from_bytes_le(from.gx).to_bigint().unwrap(), 
        Some(BigUint::from_bytes_le(from.gy).to_bigint().unwrap())
    );

    ECPGroup {
        name: from.name,
        p: BigInt::from_bytes_le(Sign::Plus, from.p),
        a: BigUint::from_bytes_le(from.a),
        b: BigUint::from_bytes_le(from.b),
        g: generator_point.clone(),
        n: BigUint::from_bytes_le(from.n),
        nbits: BigUint::from_bytes_le(from.n).bits(),
        t: vec![generator_point],
        t_size: 0
    }
}


/*---- NIST Curves ----*/
/**
 * Support for NIST curves is provided for 256, 384 and 521 bits.
 * Each entry is the regular version of the curve; Koblitz support is 
 * not provided, but can be added in future with relative ease.
 * 
 * All domain parameters for NIST curves have been sourced from the 
 * Standards of Efficient Cryptography (SEC) 2000, and can be found here:
 * http://www.secg.org/SEC2-Ver-1.0.pdf
 */

/*---- SECP256R1 ----*/

const SECP256R1: ECurveDomainParameters = ECurveDomainParameters {
    name: "SECP256R1",
    p: &[
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
    ],
    a: &[
        0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
    ],
    b: &[
        0x4B, 0x60, 0xD2, 0x27, 0x3E, 0x3C, 0xCE, 0x3B,
        0xF6, 0xB0, 0x53, 0xCC, 0xB0, 0x06, 0x1D, 0x65,
        0xBC, 0x86, 0x98, 0x76, 0x55, 0xBD, 0xEB, 0xB3,
        0xE7, 0x93, 0x3A, 0xAA, 0xD8, 0x35, 0xC6, 0x5A
    ],
    gx: &[
        0x96, 0xC2, 0x98, 0xD8, 0x45, 0x39, 0xA1, 0xF4,
        0xA0, 0x33, 0xEB, 0x2D, 0x81, 0x7D, 0x03, 0x77,
        0xF2, 0x40, 0xA4, 0x63, 0xE5, 0xE6, 0xBC, 0xF8,
        0x47, 0x42, 0x2C, 0xE1, 0xF2, 0xD1, 0x17, 0x6B
    ],
    gy: &[
        0xF5, 0x51, 0xBF, 0x37, 0x68, 0x40, 0xB6, 0xCB,
        0xCE, 0x5E, 0x31, 0x6B, 0x57, 0x33, 0xCE, 0x2B,
        0x16, 0x9E, 0x0F, 0x7C, 0x4A, 0xEB, 0xE7, 0x8E,
        0x9B, 0x7F, 0x1A, 0xFE, 0xE2, 0x42, 0xE3, 0x4F
    ],
    n: &[
        0x51, 0x25, 0x63, 0xFC, 0xC2, 0xCA, 0xB9, 0xF3,
        0x84, 0x9E, 0x17, 0xA7, 0xAD, 0xFA, 0xE6, 0xBC,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
    ]
};

/*---- End SECP256R1 ----*/


/*---- SECP384R1 ----*/

const SECP384R1: ECurveDomainParameters = ECurveDomainParameters {
    name: "SECP384R1",
    p: &[
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    ],
    a: &[
        0xFC, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    ],
    b: &[
        0xEF, 0x2A, 0xEC, 0xD3, 0xED, 0xC8, 0x85, 0x2A,
        0x9D, 0xD1, 0x2E, 0x8A, 0x8D, 0x39, 0x56, 0xC6,
        0x5A, 0x87, 0x13, 0x50, 0x8F, 0x08, 0x14, 0x03,
        0x12, 0x41, 0x81, 0xFE, 0x6E, 0x9C, 0x1D, 0x18,
        0x19, 0x2D, 0xF8, 0xE3, 0x6B, 0x05, 0x8E, 0x98,
        0xE4, 0xE7, 0x3E, 0xE2, 0xA7, 0x2F, 0x31, 0xB3
    ],
    gx: &[
        0xB7, 0x0A, 0x76, 0x72, 0x38, 0x5E, 0x54, 0x3A,
        0x6C, 0x29, 0x55, 0xBF, 0x5D, 0xF2, 0x02, 0x55,
        0x38, 0x2A, 0x54, 0x82, 0xE0, 0x41, 0xF7, 0x59,
        0x98, 0x9B, 0xA7, 0x8B, 0x62, 0x3B, 0x1D, 0x6E,
        0x74, 0xAD, 0x20, 0xF3, 0x1E, 0xC7, 0xB1, 0x8E,
        0x37, 0x05, 0x8B, 0xBE, 0x22, 0xCA, 0x87, 0xAA
    ],
    gy: &[
        0x5F, 0x0E, 0xEA, 0x90, 0x7C, 0x1D, 0x43, 0x7A,
        0x9D, 0x81, 0x7E, 0x1D, 0xCE, 0xB1, 0x60, 0x0A,
        0xC0, 0xB8, 0xF0, 0xB5, 0x13, 0x31, 0xDA, 0xE9,
        0x7C, 0x14, 0x9A, 0x28, 0xBD, 0x1D, 0xF4, 0xF8,
        0x29, 0xDC, 0x92, 0x92, 0xBF, 0x98, 0x9E, 0x5D,
        0x6F, 0x2C, 0x26, 0x96, 0x4A, 0xDE, 0x17, 0x36
    ],
    n: &[
        0x73, 0x29, 0xC5, 0xCC, 0x6A, 0x19, 0xEC, 0xEC,
        0x7A, 0xA7, 0xB0, 0x48, 0xB2, 0x0D, 0x1A, 0x58,
        0xDF, 0x2D, 0x37, 0xF4, 0x81, 0x4D, 0x63, 0xC7,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    ]
};

/*---- End SECP384R1 ----*/


/*---- SECP521R1 ----*/

const SECP521R1: ECurveDomainParameters = ECurveDomainParameters {
    name: "SECP521R1",
    p: &[
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x01
    ],
    a: &[
        0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFC
    ],
    b: &[
        0x00, 0x3F, 0x50, 0x6B, 0xD4, 0x1F, 0x45, 0xEF,
        0xF1, 0x34, 0x2C, 0x3D, 0x88, 0xDF, 0x73, 0x35,
        0x07, 0xBF, 0xB1, 0x3B, 0xBD, 0xC0, 0x52, 0x16,
        0x7B, 0x93, 0x7E, 0xEC, 0x51, 0x39, 0x19, 0x56,
        0xE1, 0x09, 0xF1, 0x8E, 0x91, 0x89, 0xB4, 0xB8,
        0xF3, 0x15, 0xB3, 0x99, 0x5B, 0x72, 0xDA, 0xA2,
        0xEE, 0x40, 0x85, 0xB6, 0xA0, 0x21, 0x9A, 0x92,
        0x1F, 0x9A, 0x1C, 0x8E, 0x61, 0xB9, 0x3E, 0x95,
        0x51, 0x00
    ],
    gx: &[
        0x66, 0xBD, 0xE5, 0xC2, 0x31, 0x7E, 0x7E, 0xF9,
        0x9B, 0x42, 0x6A, 0x85, 0xC1, 0xB3, 0x48, 0x33,
        0xDE, 0xA8, 0xFF, 0xA2, 0x27, 0xC1, 0x1D, 0xFE,
        0x28, 0x59, 0xE7, 0xEF, 0x77, 0x5E, 0x4B, 0xA1,
        0xBA, 0x3D, 0x4D, 0x6B, 0x60, 0xAF, 0x28, 0xF8,
        0x21, 0xB5, 0x3F, 0x05, 0x39, 0x81, 0x64, 0x9C,
        0x42, 0xB4, 0x95, 0x23, 0x66, 0xCB, 0x3E, 0x9E,
        0xCD, 0xE9, 0x04, 0x04, 0xB7, 0x06, 0x8E, 0x85,
        0xC6, 0x00
    ],
    gy: &[
        0x50, 0x66, 0xD1, 0x9F, 0x76, 0x94, 0xBE, 0x88,
        0x40, 0xC2, 0x72, 0xA2, 0x86, 0x70, 0x3C, 0x35,
        0x61, 0x07, 0xAD, 0x3F, 0x01, 0xB9, 0x50, 0xC5,
        0x40, 0x26, 0xF4, 0x5E, 0x99, 0x72, 0xEE, 0x97,
        0x2C, 0x66, 0x3E, 0x27, 0x17, 0xBD, 0xAF, 0x17,
        0x68, 0x44, 0x9B, 0x57, 0x49, 0x44, 0xF5, 0x98,
        0xD9, 0x1B, 0x7D, 0x2C, 0xB4, 0x5F, 0x8A, 0x5C,
        0x04, 0xC0, 0x3B, 0x9A, 0x78, 0x6A, 0x29, 0x39,
        0x18, 0x01
    ],
    n: &[
        0x09, 0x64, 0x38, 0x91, 0x1E, 0xB7, 0x6F, 0xBB,
        0xAE, 0x47, 0x9C, 0x89, 0xB8, 0xC9, 0xB5, 0x3B,
        0xD0, 0xA5, 0x09, 0xF7, 0x48, 0x01, 0xCC, 0x7F,
        0x6B, 0x96, 0x2F, 0xBF, 0x83, 0x87, 0x86, 0x51,
        0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x01
    ]
};

/*---- End SECP521R1 ----*/


/*---- BP256R1 ----*/

const BP256R1: ECurveDomainParameters = ECurveDomainParameters {
    name: "BP256R1",
    p: &[
        0x77, 0x53, 0x6E, 0x1F, 0x1D, 0x48, 0x13, 0x20,
        0x28, 0x20, 0x26, 0xD5, 0x23, 0xF6, 0x3B, 0x6E,
        0x72, 0x8D, 0x83, 0x9D, 0x90, 0x0A, 0x66, 0x3E,
        0xBC, 0xA9, 0xEE, 0xA1, 0xDB, 0x57, 0xFB, 0xA9
    ],
    a: &[
        0xD9, 0xB5, 0x30, 0xF3, 0x44, 0x4B, 0x4A, 0xE9,
        0x6C, 0x5C, 0xDC, 0x26, 0xC1, 0x55, 0x80, 0xFB,
        0xE7, 0xFF, 0x7A, 0x41, 0x30, 0x75, 0xF6, 0xEE,
        0x57, 0x30, 0x2C, 0xFC, 0x75, 0x09, 0x5A, 0x7D
    ],
    b: &[
        0xB6, 0x07, 0x8C, 0xFF, 0x18, 0xDC, 0xCC, 0x6B,
        0xCE, 0xE1, 0xF7, 0x5C, 0x29, 0x16, 0x84, 0x95,
        0xBF, 0x7C, 0xD7, 0xBB, 0xD9, 0xB5, 0x30, 0xF3,
        0x44, 0x4B, 0x4A, 0xE9, 0x6C, 0x5C, 0xDC, 0x26
    ],
    gx: &[
        0x62, 0x32, 0xCE, 0x9A, 0xBD, 0x53, 0x44, 0x3A,
        0xC2, 0x23, 0xBD, 0xE3, 0xE1, 0x27, 0xDE, 0xB9,
        0xAF, 0xB7, 0x81, 0xFC, 0x2F, 0x48, 0x4B, 0x2C,
        0xCB, 0x57, 0x7E, 0xCB, 0xB9, 0xAE, 0xD2, 0x8B
    ],
    gy: &[
        0x97, 0x69, 0x04, 0x2F, 0xC7, 0x54, 0x1D, 0x5C,
        0x54, 0x8E, 0xED, 0x2D, 0x13, 0x45, 0x77, 0xC2,
        0xC9, 0x1D, 0x61, 0x14, 0x1A, 0x46, 0xF8, 0x97,
        0xFD, 0xC4, 0xDA, 0xC3, 0x35, 0xF8, 0x7E, 0x54
    ],
    n: &[
        0xA7, 0x56, 0x48, 0x97, 0x82, 0x0E, 0x1E, 0x90,
        0xF7, 0xA6, 0x61, 0xB5, 0xA3, 0x7A, 0x39, 0x8C,
        0x71, 0x8D, 0x83, 0x9D, 0x90, 0x0A, 0x66, 0x3E,
        0xBC, 0xA9, 0xEE, 0xA1, 0xDB, 0x57, 0xFB, 0xA9
    ]
};

/*---- End BP256R1 ----*/


/*---- BP384R1 ----*/

const BP384R1: ECurveDomainParameters = ECurveDomainParameters {
    name: "BP384R1",
    p: &[
        0x53, 0xEC, 0x07, 0x31, 0x13, 0x00, 0x47, 0x87,
        0x71, 0x1A, 0x1D, 0x90, 0x29, 0xA7, 0xD3, 0xAC,
        0x23, 0x11, 0xB7, 0x7F, 0x19, 0xDA, 0xB1, 0x12,
        0xB4, 0x56, 0x54, 0xED, 0x09, 0x71, 0x2F, 0x15,
        0xDF, 0x41, 0xE6, 0x50, 0x7E, 0x6F, 0x5D, 0x0F,
        0x28, 0x6D, 0x38, 0xA3, 0x82, 0x1E, 0xB9, 0x8C
    ],
    a: &[
        0x26, 0x28, 0xCE, 0x22, 0xDD, 0xC7, 0xA8, 0x04,
        0xEB, 0xD4, 0x3A, 0x50, 0x4A, 0x81, 0xA5, 0x8A,
        0x0F, 0xF9, 0x91, 0xBA, 0xEF, 0x65, 0x91, 0x13,
        0x87, 0x27, 0xB2, 0x4F, 0x8E, 0xA2, 0xBE, 0xC2,
        0xA0, 0xAF, 0x05, 0xCE, 0x0A, 0x08, 0x72, 0x3C,
        0x0C, 0x15, 0x8C, 0x3D, 0xC6, 0x82, 0xC3, 0x7B
    ],
    b: &[
        0x11, 0x4C, 0x50, 0xFA, 0x96, 0x86, 0xB7, 0x3A,
        0x94, 0xC9, 0xDB, 0x95, 0x02, 0x39, 0xB4, 0x7C,
        0xD5, 0x62, 0xEB, 0x3E, 0xA5, 0x0E, 0x88, 0x2E,
        0xA6, 0xD2, 0xDC, 0x07, 0xE1, 0x7D, 0xB7, 0x2F,
        0x7C, 0x44, 0xF0, 0x16, 0x54, 0xB5, 0x39, 0x8B,
        0x26, 0x28, 0xCE, 0x22, 0xDD, 0xC7, 0xA8, 0x04
    ],
    gx: &[
        0x1E, 0xAF, 0xD4, 0x47, 0xE2, 0xB2, 0x87, 0xEF,
        0xAA, 0x46, 0xD6, 0x36, 0x34, 0xE0, 0x26, 0xE8,
        0xE8, 0x10, 0xBD, 0x0C, 0xFE, 0xCA, 0x7F, 0xDB,
        0xE3, 0x4F, 0xF1, 0x7E, 0xE7, 0xA3, 0x47, 0x88,
        0x6B, 0x3F, 0xC1, 0xB7, 0x81, 0x3A, 0xA6, 0xA2,
        0xFF, 0x45, 0xCF, 0x68, 0xF0, 0x64, 0x1C, 0x1D
    ],
    gy: &[
        0x15, 0x53, 0x3C, 0x26, 0x41, 0x03, 0x82, 0x42,
        0x11, 0x81, 0x91, 0x77, 0x21, 0x46, 0x46, 0x0E,
        0x28, 0x29, 0x91, 0xF9, 0x4F, 0x05, 0x9C, 0xE1,
        0x64, 0x58, 0xEC, 0xFE, 0x29, 0x0B, 0xB7, 0x62,
        0x52, 0xD5, 0xCF, 0x95, 0x8E, 0xEB, 0xB1, 0x5C,
        0xA4, 0xC2, 0xF9, 0x20, 0x75, 0x1D, 0xBE, 0x8A
    ],
    n: &[
        0x65, 0x65, 0x04, 0xE9, 0x02, 0x32, 0x88, 0x3B,
        0x10, 0xC3, 0x7F, 0x6B, 0xAF, 0xB6, 0x3A, 0xCF,
        0xA7, 0x25, 0x04, 0xAC, 0x6C, 0x6E, 0x16, 0x1F,
        0xB3, 0x56, 0x54, 0xED, 0x09, 0x71, 0x2F, 0x15,
        0xDF, 0x41, 0xE6, 0x50, 0x7E, 0x6F, 0x5D, 0x0F,
        0x28, 0x6D, 0x38, 0xA3, 0x82, 0x1E, 0xB9, 0x8C
    ]
};

/*---- End BP384R1 ----*/


/*---- BP521R1 ----*/

const BP521R1: ECurveDomainParameters = ECurveDomainParameters {
    name: "BP521R1",
    p: &[
        0xF3, 0x48, 0x3A, 0x58, 0x56, 0x60, 0xAA, 0x28,
        0x85, 0xC6, 0x82, 0x2D, 0x2F, 0xFF, 0x81, 0x28,
        0xE6, 0x80, 0xA3, 0xE6, 0x2A, 0xA1, 0xCD, 0xAE,
        0x42, 0x68, 0xC6, 0x9B, 0x00, 0x9B, 0x4D, 0x7D,
        0x71, 0x08, 0x33, 0x70, 0xCA, 0x9C, 0x63, 0xD6,
        0x0E, 0xD2, 0xC9, 0xB3, 0xB3, 0x8D, 0x30, 0xCB,
        0x07, 0xFC, 0xC9, 0x33, 0xAE, 0xE6, 0xD4, 0x3F,
        0x8B, 0xC4, 0xE9, 0xDB, 0xB8, 0x9D, 0xDD, 0xAA
    ],
    a: &[
        0xCA, 0x94, 0xFC, 0x77, 0x4D, 0xAC, 0xC1, 0xE7,
        0xB9, 0xC7, 0xF2, 0x2B, 0xA7, 0x17, 0x11, 0x7F,
        0xB5, 0xC8, 0x9A, 0x8B, 0xC9, 0xF1, 0x2E, 0x0A,
        0xA1, 0x3A, 0x25, 0xA8, 0x5A, 0x5D, 0xED, 0x2D,
        0xBC, 0x63, 0x98, 0xEA, 0xCA, 0x41, 0x34, 0xA8,
        0x10, 0x16, 0xF9, 0x3D, 0x8D, 0xDD, 0xCB, 0x94,
        0xC5, 0x4C, 0x23, 0xAC, 0x45, 0x71, 0x32, 0xE2,
        0x89, 0x3B, 0x60, 0x8B, 0x31, 0xA3, 0x30, 0x78
    ],
    b: &[
        0x23, 0xF7, 0x16, 0x80, 0x63, 0xBD, 0x09, 0x28,
        0xDD, 0xE5, 0xBA, 0x5E, 0xB7, 0x50, 0x40, 0x98,
        0x67, 0x3E, 0x08, 0xDC, 0xCA, 0x94, 0xFC, 0x77,
        0x4D, 0xAC, 0xC1, 0xE7, 0xB9, 0xC7, 0xF2, 0x2B,
        0xA7, 0x17, 0x11, 0x7F, 0xB5, 0xC8, 0x9A, 0x8B,
        0xC9, 0xF1, 0x2E, 0x0A, 0xA1, 0x3A, 0x25, 0xA8,
        0x5A, 0x5D, 0xED, 0x2D, 0xBC, 0x63, 0x98, 0xEA,
        0xCA, 0x41, 0x34, 0xA8, 0x10, 0x16, 0xF9, 0x3D
    ],
    gx: &[
        0x22, 0xF8, 0xB9, 0xBC, 0x09, 0x22, 0x35, 0x8B,
        0x68, 0x5E, 0x6A, 0x40, 0x47, 0x50, 0x6D, 0x7C,
        0x5F, 0x7D, 0xB9, 0x93, 0x7B, 0x68, 0xD1, 0x50,
        0x8D, 0xD4, 0xD0, 0xE2, 0x78, 0x1F, 0x3B, 0xFF,
        0x8E, 0x09, 0xD0, 0xF4, 0xEE, 0x62, 0x3B, 0xB4,
        0xC1, 0x16, 0xD9, 0xB5, 0x70, 0x9F, 0xED, 0x85,
        0x93, 0x6A, 0x4C, 0x9C, 0x2E, 0x32, 0x21, 0x5A,
        0x64, 0xD9, 0x2E, 0xD8, 0xBD, 0xE4, 0xAE, 0x81
    ],
    gy: &[
        0x92, 0x08, 0xD8, 0x3A, 0x0F, 0x1E, 0xCD, 0x78,
        0x06, 0x54, 0xF0, 0xA8, 0x2F, 0x2B, 0xCA, 0xD1,
        0xAE, 0x63, 0x27, 0x8A, 0xD8, 0x4B, 0xCA, 0x5B,
        0x5E, 0x48, 0x5F, 0x4A, 0x49, 0xDE, 0xDC, 0xB2,
        0x11, 0x81, 0x1F, 0x88, 0x5B, 0xC5, 0x00, 0xA0,
        0x1A, 0x7B, 0xA5, 0x24, 0x00, 0xF7, 0x09, 0xF2,
        0xFD, 0x22, 0x78, 0xCF, 0xA9, 0xBF, 0xEA, 0xC0,
        0xEC, 0x32, 0x63, 0x56, 0x5D, 0x38, 0xDE, 0x7D
    ],
    n: &[
        0x69, 0x00, 0xA9, 0x9C, 0x82, 0x96, 0x87, 0xB5,
        0xDD, 0xDA, 0x5D, 0x08, 0x81, 0xD3, 0xB1, 0x1D,
        0x47, 0x10, 0xAC, 0x7F, 0x19, 0x61, 0x86, 0x41,
        0x19, 0x26, 0xA9, 0x4C, 0x41, 0x5C, 0x3E, 0x55,
        0x70, 0x08, 0x33, 0x70, 0xCA, 0x9C, 0x63, 0xD6,
        0x0E, 0xD2, 0xC9, 0xB3, 0xB3, 0x8D, 0x30, 0xCB,
        0x07, 0xFC, 0xC9, 0x33, 0xAE, 0xE6, 0xD4, 0x3F,
        0x8B, 0xC4, 0xE9, 0xDB, 0xB8, 0x9D, 0xDD, 0xAA
    ]
};